{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mateusz\\\\Desktop\\\\Github-projects\\\\react-tictactoe\\\\src\\\\App.js\";\nimport React, { Component, Fragment } from 'react';\nimport Board from './Board.js';\nimport { squares } from './squares-object.js';\nimport GameConsole from './GameConsole.js';\nimport Winner from './Winner.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.playerMove = event => {\n      const {\n        player,\n        squares\n      } = this.state;\n      const targetSquareId = event.target.id;\n\n      const fieldFree = () => {\n        if (player === 1) {\n          (() => {\n            // anonimowa samowywołująca sie funkcja \n            squares.map(element => {\n              // wyszukujemy w tablicy squares obiekt z pasującą wartością id targetSquareId i w tym obiekcie do właściwośći content dodajemy X lub O w zależności od kolejki\n              return element.id === targetSquareId && element.content.length === 0 ? element.content = 'X' : null;\n            });\n            this.setState({\n              player: 2\n            }, () => console.log(squares)); // zmiana statusu, umożliwia to przełączanie pomiędzy ruchami gracza X i O\n          })();\n        } else {\n          (() => {\n            squares.map(element => {\n              return element.id === targetSquareId && element.content.length === 0 ? element.content = 'O' : null;\n            });\n            this.setState({\n              player: 1\n            }, () => console.log(squares));\n          })();\n        }\n      };\n\n      if (!event.target.hasChildNodes()) {\n        // warunek powstrzymuje przed zmianą kolejki gdy naciśnie się pełne pole\n        fieldFree();\n        this.setState({\n          wrongField: false\n        });\n      } else {\n        this.setState({\n          wrongField: true\n        });\n      }\n\n      if (squares[0].content === 'X' && squares[1].content === 'X' && squares[2].content === 'X' || // horizontal 'X' win checking\n      squares[3].content === 'X' && squares[4].content === 'X' && squares[5].content === 'X' || squares[6].content === 'X' && squares[7].content === 'X' && squares[8].content === 'X') {\n        console.log('X winn');\n        this.setState({\n          Xwin: true\n        });\n      } else if (squares[0].content === 'O' && squares[1].content === 'O' && squares[2].content === 'O' || // horizontal 'O' win checking\n      squares[3].content === 'O' && squares[4].content === 'O' && squares[5].content === 'O' || squares[6].content === 'O' && squares[7].content === 'O' && squares[8].content === 'O') {\n        console.log('O win');\n        this.setState({\n          Owin: true\n        });\n      } else if (squares[0].content === 'X' && squares[3].content === 'X' && squares[6].content === 'X' || // vertical 'X' win checking\n      squares[1].content === 'X' && squares[4].content === 'X' && squares[7].content === 'X' || squares[2].content === 'X' && squares[5].content === 'X' && squares[8].content === 'X') {\n        console.log('X win vertical');\n        this.setState({\n          Xwin: true\n        });\n      } else if (squares[0].content === 'O' && squares[3].content === 'O' && squares[6].content === 'O' || // vertical 'O' win checking\n      squares[1].content === 'O' && squares[4].content === 'O' && squares[7].content === 'O' || squares[2].content === 'O' && squares[5].content === 'O' && squares[8].content === 'O') {\n        console.log('O win vertical');\n        this.setState({\n          Owin: true\n        });\n      } else if (squares[0].content === 'X' && squares[4].content === 'X' && squares[8].content === 'X' || // cross 'X' win\n      squares[2].content === 'X' && squares[4].content === 'X' && squares[6].content === 'X') {\n        console.log('X cross win');\n        this.setState({\n          Xwin: true\n        });\n      } else if (squares[0].content === 'O' && squares[4].content === 'O' && squares[8].content === 'O' || // cross 'O' win\n      squares[2].content === 'O' && squares[4].content === 'O' && squares[6].content === 'O') {\n        console.log('cross O win');\n        this.setState({\n          Owin: true\n        });\n      }\n    };\n\n    this.state = {\n      player: 1,\n      // 1 to gracz nr 2 to gracz nr  - stan kontrolujący kolejkę\n      squares: squares,\n      // tablica w której każda pozycja odpowiada jednemu kwadratowi na planszy [sq1, sq2, sq3 itd]. Posłuży ona do tego aby wyłonić zwycięzcę gry oraz do implementacji elementów do komponentu square oraz do generowania kwadratów na planszy.\n      wrongField: false,\n      // kiedy zostanie naciśnięte pełne pole zmieni się na true i na podstawie zmiany tego stanu  zostanie wywołana akcja\n      Xwin: false,\n      // zmienione na true gdy zostanie wykryte zwycięstwo gracza X(1)\n      Owin: false\n    };\n  }\n\n  render() {\n    const {\n      player,\n      wrongField,\n      Xwin,\n      Owin,\n      Draw\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"game-header\",\n          children: \"TIC-TAC-TOE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Winner, {\n        Xwin: Xwin,\n        Owin: Owin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        squaresList: squares,\n        playerMove: this.playerMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GameConsole, {\n        turn: player,\n        wrongField: wrongField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Mateusz/Desktop/Github-projects/react-tictactoe/src/App.js"],"names":["React","Component","Fragment","Board","squares","GameConsole","Winner","App","constructor","playerMove","event","player","state","targetSquareId","target","id","fieldFree","map","element","content","length","setState","console","log","hasChildNodes","wrongField","Xwin","Owin","render","Draw"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport Board from './Board.js';\r\nimport {squares} from './squares-object.js';\r\nimport GameConsole from './GameConsole.js';\r\nimport Winner from './Winner.js';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            player: 1, // 1 to gracz nr 2 to gracz nr  - stan kontrolujący kolejkę\r\n            squares: squares, // tablica w której każda pozycja odpowiada jednemu kwadratowi na planszy [sq1, sq2, sq3 itd]. Posłuży ona do tego aby wyłonić zwycięzcę gry oraz do implementacji elementów do komponentu square oraz do generowania kwadratów na planszy.\r\n            wrongField: false, // kiedy zostanie naciśnięte pełne pole zmieni się na true i na podstawie zmiany tego stanu  zostanie wywołana akcja\r\n            Xwin: false, // zmienione na true gdy zostanie wykryte zwycięstwo gracza X(1)\r\n            Owin: false,\r\n        }\r\n    }\r\n\r\n    playerMove = (event) => {\r\n        const { player, squares} = this.state;\r\n        const targetSquareId = event.target.id;\r\n        const fieldFree = () =>{\r\n        if(player === 1) {\r\n            (() => { // anonimowa samowywołująca sie funkcja \r\n                squares.map(element => { // wyszukujemy w tablicy squares obiekt z pasującą wartością id targetSquareId i w tym obiekcie do właściwośći content dodajemy X lub O w zależności od kolejki\r\n                    return element.id === targetSquareId && element.content.length === 0 ?\r\n                    element.content = 'X'\r\n                    : \r\n                    null;\r\n                })\r\n                this.setState({player: 2}, () => console.log(squares)); // zmiana statusu, umożliwia to przełączanie pomiędzy ruchami gracza X i O\r\n            })();\r\n        } else {\r\n            (() => {\r\n                squares.map(element => {\r\n                    return element.id === targetSquareId && element.content.length === 0 ?\r\n                    element.content = 'O' \r\n                    : \r\n                    null;\r\n                    })\r\n                this.setState({player: 1}, () => console.log(squares));\r\n            })()\r\n          } \r\n        }\r\n        if(!event.target.hasChildNodes()){ // warunek powstrzymuje przed zmianą kolejki gdy naciśnie się pełne pole\r\n            fieldFree();\r\n            this.setState({wrongField: false})\r\n        } else {\r\n            this.setState({wrongField: true});\r\n        }\r\n\r\n        if((squares[0].content === 'X' && squares[1].content === 'X' && squares[2].content === 'X') || // horizontal 'X' win checking\r\n        (squares[3].content === 'X' && squares[4].content === 'X' && squares[5].content === 'X') ||\r\n        (squares[6].content === 'X' && squares[7].content === 'X' && squares[8].content === 'X')) {\r\n            console.log('X winn');\r\n            this.setState({Xwin: true})\r\n        } else if((squares[0].content === 'O' && squares[1].content === 'O' && squares[2].content === 'O') || // horizontal 'O' win checking\r\n        (squares[3].content === 'O' && squares[4].content === 'O' && squares[5].content === 'O') ||\r\n        (squares[6].content === 'O' && squares[7].content === 'O' && squares[8].content === 'O')) {\r\n            console.log('O win');\r\n            this.setState({Owin: true})\r\n        } else if((squares[0].content === 'X' && squares[3].content === 'X' && squares[6].content === 'X') || // vertical 'X' win checking\r\n        (squares[1].content === 'X' && squares[4].content === 'X' && squares[7].content === 'X') ||\r\n        (squares[2].content === 'X' && squares[5].content === 'X' && squares[8].content === 'X')) {\r\n            console.log('X win vertical')\r\n            this.setState({Xwin: true})\r\n        } else if((squares[0].content === 'O' && squares[3].content === 'O' && squares[6].content === 'O') || // vertical 'O' win checking\r\n        (squares[1].content === 'O' && squares[4].content === 'O' && squares[7].content === 'O') ||\r\n        (squares[2].content === 'O' && squares[5].content === 'O' && squares[8].content === 'O')) {\r\n            console.log('O win vertical')\r\n            this.setState({Owin: true})\r\n        }else if((squares[0].content === 'X' && squares[4].content === 'X' && squares[8].content === 'X') || // cross 'X' win\r\n        (squares[2].content === 'X' && squares[4].content === 'X' && squares[6].content === 'X')) {\r\n            console.log('X cross win')\r\n            this.setState({Xwin: true})\r\n        } else if((squares[0].content === 'O' && squares[4].content === 'O' && squares[8].content === 'O') || // cross 'O' win\r\n        (squares[2].content === 'O' && squares[4].content === 'O' && squares[6].content === 'O')) {\r\n            console.log('cross O win');\r\n            this.setState({Owin: true})\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {player, wrongField, Xwin, Owin, Draw} = this.state;\r\n        return(\r\n            <Fragment>\r\n                <div className='game-header-container'><h1 id='game-header'>TIC-TAC-TOE</h1></div>\r\n                <Winner Xwin={Xwin} Owin={Owin}/>\r\n                <Board squaresList={squares} playerMove={this.playerMove}/>\r\n                <GameConsole turn={player} wrongField={wrongField}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}