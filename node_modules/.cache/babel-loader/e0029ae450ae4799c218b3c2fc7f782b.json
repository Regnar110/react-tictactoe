{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mateusz\\\\Desktop\\\\Github-projects\\\\react-tictactoe\\\\src\\\\App.js\";\nimport React, { Component, Fragment } from 'react';\nimport Board from './Board.js';\nimport { squares } from './squares-object.js';\nimport GameConsole from './GameConsole.js';\nimport Winner from './Winner.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.playerMove = event => {\n      const {\n        player,\n        squares,\n        PlayerMoves,\n        Draw\n      } = this.state;\n      let fakeSquaresArr = this.state.squares;\n      const targetSquareId = event.target.id;\n\n      const fieldFree = () => {\n        if (player === 1) {\n          (() => {\n            // anonimowa samowywołująca sie funkcja \n            fakeSquaresArr.map(element => {\n              // wyszukujemy w tablicy squares obiekt z pasującą wartością id targetSquareId i w tym obiekcie do właściwośći content dodajemy X lub O w zależności od kolejki\n              return element.id === targetSquareId && element.content.length === 0 ? element.content = 'X' : null;\n            });\n            this.setState({\n              player: 2\n            }, () => console.log(fakeSquaresArr)); // zmiana statusu, umożliwia to przełączanie pomiędzy ruchami gracza X i O\n          })();\n        } else {\n          (() => {\n            fakeSquaresArr.map(element => {\n              return element.id === targetSquareId && element.content.length === 0 ? element.content = 'O' : null;\n            });\n            this.setState({\n              player: 1\n            }, () => console.log(fakeSquaresArr));\n          })();\n        }\n      };\n\n      if (!event.target.hasChildNodes()) {\n        // warunek powstrzymuje przed zmianą kolejki gdy naciśnie się pełne pole\n        fieldFree();\n        this.setState({\n          wrongField: false\n        });\n      } else {\n        this.setState({\n          wrongField: true\n        });\n      }\n\n      if (fakeSquaresArr[0].content === 'X' && fakeSquaresArr[1].content === 'X' && fakeSquaresArr[2].content === 'X' || // horizontal 'X' win checking\n      fakeSquaresArr[3].content === 'X' && fakeSquaresArr[4].content === 'X' && fakeSquaresArr[5].content === 'X' || fakeSquaresArr[6].content === 'X' && fakeSquaresArr[7].content === 'X' && fakeSquaresArr[8].content === 'X') {\n        console.log('X winn');\n        this.setState({\n          Xwin: true\n        });\n      } else if (fakeSquaresArr[0].content === 'O' && fakeSquaresArr[1].content === 'O' && fakefakeSquaresArrArr[2].content === 'O' || // horizontal 'O' win checking\n      fakeSquaresArr[3].content === 'O' && fakeSquaresArr[4].content === 'O' && fakeSquaresArr[5].content === 'O' || fakeSquaresArr[6].content === 'O' && fakeSquaresArr[7].content === 'O' && fakeSquaresArr[8].content === 'O') {\n        console.log('O win');\n        this.setState({\n          Owin: true\n        });\n      } else if (fakeSquaresArr[0].content === 'X' && fakeSquaresArr[3].content === 'X' && fakeSquaresArr[6].content === 'X' || // vertical 'X' win checking\n      fakeSquaresArr[1].content === 'X' && fakeSquaresArr[4].content === 'X' && fakeSquaresArr[7].content === 'X' || fakeSquaresArr[2].content === 'X' && fakeSquaresArr[5].content === 'X' && fakeSquaresArr[8].content === 'X') {\n        console.log('X win vertical');\n        this.setState({\n          Xwin: true\n        });\n      } else if (fakeSquaresArr[0].content === 'O' && fakeSquaresArr[3].content === 'O' && fakeSquaresArr[6].content === 'O' || // vertical 'O' win checking\n      fakeSquaresArr[1].content === 'O' && fakeSquaresArr[4].content === 'O' && fakeSquaresArr[7].content === 'O' || fakeSquaresArr[2].content === 'O' && fakeSquaresArr[5].content === 'O' && fakeSquaresArr[8].content === 'O') {\n        console.log('O win vertical');\n        this.setState({\n          Owin: true\n        });\n      } else if (fakeSquaresArr[0].content === 'X' && fakeSquaresArr[4].content === 'X' && fakeSquaresArr[8].content === 'X' || // cross 'X' win\n      fakeSquaresArr[2].content === 'X' && fakeSquaresArr[4].content === 'X' && fakeSquaresArr[6].content === 'X') {\n        console.log('X cross win');\n        this.setState({\n          Xwin: true\n        });\n      } else if (fakeSquaresArr[0].content === 'O' && fakeSquaresArr[4].content === 'O' && fakeSquaresArr[8].content === 'O' || // cross 'O' win\n      fakeSquaresArr[2].content === 'O' && fakeSquaresArr[4].content === 'O' && fakeSquaresArr[6].content === 'O') {\n        console.log('cross O win');\n        this.setState({\n          Owin: true\n        });\n      }\n    };\n\n    this.resetGame = () => {\n      const winnerHeader = document.querySelector('.winner-container');\n      const square = document.querySelectorAll('.square');\n      winnerHeader.style.height = '0px';\n      this.setState({\n        player: 1\n      });\n      this.setState({\n        wrongField: false\n      });\n      this.setState({\n        Xwin: false\n      });\n      this.setState({\n        Owin: false\n      });\n      const array = Array.from(square);\n      console.log(array);\n      array.forEach(element => {\n        if (element.firstChild) {\n          element.removeChild(element.firstChild);\n        }\n      });\n    };\n\n    this.state = {\n      player: 1,\n      // 1 to gracz nr 2 to gracz nr  - stan kontrolujący kolejkę\n      squares: squares,\n      // tablica w której każda pozycja odpowiada jednemu kwadratowi na planszy [sq1, sq2, sq3 itd]. Posłuży ona do tego aby wyłonić zwycięzcę gry oraz do implementacji elementów do komponentu square oraz do generowania kwadratów na planszy.\n      wrongField: false,\n      // kiedy zostanie naciśnięte pełne pole zmieni się na true i na podstawie zmiany tego stanu  zostanie wywołana akcja\n      Xwin: false,\n      // zmienione na true gdy zostanie wykryte zwycięstwo gracza X(1)\n      Owin: false\n    };\n  }\n\n  render() {\n    const {\n      player,\n      wrongField,\n      Xwin,\n      Owin,\n      PlayerMoves\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"game-header\",\n          children: \"TIC-TAC-TOE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Winner, {\n        Xwin: Xwin,\n        Owin: Owin,\n        Draw: PlayerMoves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        squaresList: squares,\n        playerMove: this.playerMove,\n        reset: this.resetGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GameConsole, {\n        turn: player,\n        wrongField: wrongField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Mateusz/Desktop/Github-projects/react-tictactoe/src/App.js"],"names":["React","Component","Fragment","Board","squares","GameConsole","Winner","App","constructor","playerMove","event","player","PlayerMoves","Draw","state","fakeSquaresArr","targetSquareId","target","id","fieldFree","map","element","content","length","setState","console","log","hasChildNodes","wrongField","Xwin","fakefakeSquaresArrArr","Owin","resetGame","winnerHeader","document","querySelector","square","querySelectorAll","style","height","array","Array","from","forEach","firstChild","removeChild","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAAQC,OAAR,QAAsB,qBAAtB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AACxBO,EAAAA,WAAW,GAAG;AACV;;AADU,SAWdC,UAXc,GAWAC,KAAD,IAAW;AACpB,YAAM;AAAEC,QAAAA,MAAF;AAAUP,QAAAA,OAAV;AAAmBQ,QAAAA,WAAnB;AAAgCC,QAAAA;AAAhC,UAAwC,KAAKC,KAAnD;AACA,UAAIC,cAAc,GAAG,KAAKD,KAAL,CAAWV,OAAhC;AACA,YAAMY,cAAc,GAAGN,KAAK,CAACO,MAAN,CAAaC,EAApC;;AACA,YAAMC,SAAS,GAAG,MAAK;AACvB,YAAGR,MAAM,KAAK,CAAd,EAAiB;AACb,WAAC,MAAM;AAAE;AACLI,YAAAA,cAAc,CAACK,GAAf,CAAmBC,OAAO,IAAI;AAAE;AAC5B,qBAAOA,OAAO,CAACH,EAAR,KAAeF,cAAf,IAAiCK,OAAO,CAACC,OAAR,CAAgBC,MAAhB,KAA2B,CAA5D,GACPF,OAAO,CAACC,OAAR,GAAkB,GADX,GAGP,IAHA;AAIH,aALD;AAMA,iBAAKE,QAAL,CAAc;AAACb,cAAAA,MAAM,EAAE;AAAT,aAAd,EAA2B,MAAMc,OAAO,CAACC,GAAR,CAAYX,cAAZ,CAAjC,EAPG,CAO4D;AAClE,WARD;AASH,SAVD,MAUO;AACH,WAAC,MAAM;AACHA,YAAAA,cAAc,CAACK,GAAf,CAAmBC,OAAO,IAAI;AAC1B,qBAAOA,OAAO,CAACH,EAAR,KAAeF,cAAf,IAAiCK,OAAO,CAACC,OAAR,CAAgBC,MAAhB,KAA2B,CAA5D,GACPF,OAAO,CAACC,OAAR,GAAkB,GADX,GAGP,IAHA;AAIC,aALL;AAMA,iBAAKE,QAAL,CAAc;AAACb,cAAAA,MAAM,EAAE;AAAT,aAAd,EAA2B,MAAMc,OAAO,CAACC,GAAR,CAAYX,cAAZ,CAAjC;AACH,WARD;AASD;AACF,OAtBD;;AAuBA,UAAG,CAACL,KAAK,CAACO,MAAN,CAAaU,aAAb,EAAJ,EAAiC;AAAE;AAC/BR,QAAAA,SAAS;AACT,aAAKK,QAAL,CAAc;AAACI,UAAAA,UAAU,EAAE;AAAb,SAAd;AACH,OAHD,MAGO;AACH,aAAKJ,QAAL,CAAc;AAACI,UAAAA,UAAU,EAAE;AAAb,SAAd;AACH;;AAED,UAAIb,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAzG,IAAiH;AACnHP,MAAAA,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GADtG,IAEFP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAFzG,EAE+G;AAC3GG,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,aAAKF,QAAL,CAAc;AAACK,UAAAA,IAAI,EAAE;AAAP,SAAd;AACH,OALD,MAKO,IAAId,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EQ,qBAAqB,CAAC,CAAD,CAArB,CAAyBR,OAAzB,KAAqC,GAAhH,IAAwH;AACjIP,MAAAA,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAD/F,IAETP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAFlG,EAEwG;AAC3GG,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,aAAKF,QAAL,CAAc;AAACO,UAAAA,IAAI,EAAE;AAAP,SAAd;AACH,OALM,MAKA,IAAIhB,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAzG,IAAiH;AAC1HP,MAAAA,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAD/F,IAETP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAFlG,EAEwG;AAC3GG,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,aAAKF,QAAL,CAAc;AAACK,UAAAA,IAAI,EAAE;AAAP,SAAd;AACH,OALM,MAKA,IAAId,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAzG,IAAiH;AAC1HP,MAAAA,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAD/F,IAETP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAFlG,EAEwG;AAC3GG,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,aAAKF,QAAL,CAAc;AAACO,UAAAA,IAAI,EAAE;AAAP,SAAd;AACH,OALM,MAKD,IAAIhB,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAzG,IAAiH;AACzHP,MAAAA,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GADnG,EACyG;AAC3GG,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,aAAKF,QAAL,CAAc;AAACK,UAAAA,IAAI,EAAE;AAAP,SAAd;AACH,OAJK,MAIC,IAAId,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAzG,IAAiH;AAC1HP,MAAAA,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAA9B,IAAqCP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GAAnE,IAA0EP,cAAc,CAAC,CAAD,CAAd,CAAkBO,OAAlB,KAA8B,GADlG,EACwG;AAC3GG,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,aAAKF,QAAL,CAAc;AAACO,UAAAA,IAAI,EAAE;AAAP,SAAd;AACH;AACJ,KA1Ea;;AAAA,SA4EdC,SA5Ec,GA4EF,MAAM;AACd,YAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,CAArB;AACA,YAAMC,MAAM,GAAGF,QAAQ,CAACG,gBAAT,CAA0B,SAA1B,CAAf;AACAJ,MAAAA,YAAY,CAACK,KAAb,CAAmBC,MAAnB,GAA4B,KAA5B;AACA,WAAKf,QAAL,CAAc;AAACb,QAAAA,MAAM,EAAE;AAAT,OAAd;AACA,WAAKa,QAAL,CAAc;AAACI,QAAAA,UAAU,EAAC;AAAZ,OAAd;AACA,WAAKJ,QAAL,CAAc;AAACK,QAAAA,IAAI,EAAC;AAAN,OAAd;AACA,WAAKL,QAAL,CAAc;AAACO,QAAAA,IAAI,EAAC;AAAN,OAAd;AACA,YAAMS,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWN,MAAX,CAAd;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACAA,MAAAA,KAAK,CAACG,OAAN,CAActB,OAAO,IAAI;AACrB,YAAGA,OAAO,CAACuB,UAAX,EAAsB;AAClBvB,UAAAA,OAAO,CAACwB,WAAR,CAAoBxB,OAAO,CAACuB,UAA5B;AACH;AACJ,OAJD;AAKH,KA3Fa;;AAEV,SAAK9B,KAAL,GAAa;AACTH,MAAAA,MAAM,EAAE,CADC;AACE;AACXP,MAAAA,OAAO,EAAEA,OAFA;AAES;AAClBwB,MAAAA,UAAU,EAAE,KAHH;AAGU;AACnBC,MAAAA,IAAI,EAAE,KAJG;AAII;AACbE,MAAAA,IAAI,EAAE;AALG,KAAb;AAOH;;AAoFDe,EAAAA,MAAM,GAAG;AACL,UAAM;AAACnC,MAAAA,MAAD;AAASiB,MAAAA,UAAT;AAAqBC,MAAAA,IAArB;AAA2BE,MAAAA,IAA3B;AAAiCnB,MAAAA;AAAjC,QAAgD,KAAKE,KAA3D;AACA,wBACI,QAAC,QAAD;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,+BAAuC;AAAI,UAAA,EAAE,EAAC,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAEe,IAAd;AAAoB,QAAA,IAAI,EAAEE,IAA1B;AAAgC,QAAA,IAAI,EAAEnB;AAAtC;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,KAAD;AAAO,QAAA,WAAW,EAAER,OAApB;AAA6B,QAAA,UAAU,EAAE,KAAKK,UAA9C;AAA0D,QAAA,KAAK,EAAE,KAAKuB;AAAtE;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,QAAC,WAAD;AAAa,QAAA,IAAI,EAAErB,MAAnB;AAA2B,QAAA,UAAU,EAAEiB;AAAvC;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AAxGuB;;AA4G5B,eAAerB,GAAf","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport Board from './Board.js';\r\nimport {squares} from './squares-object.js';\r\nimport GameConsole from './GameConsole.js';\r\nimport Winner from './Winner.js';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            player: 1, // 1 to gracz nr 2 to gracz nr  - stan kontrolujący kolejkę\r\n            squares: squares, // tablica w której każda pozycja odpowiada jednemu kwadratowi na planszy [sq1, sq2, sq3 itd]. Posłuży ona do tego aby wyłonić zwycięzcę gry oraz do implementacji elementów do komponentu square oraz do generowania kwadratów na planszy.\r\n            wrongField: false, // kiedy zostanie naciśnięte pełne pole zmieni się na true i na podstawie zmiany tego stanu  zostanie wywołana akcja\r\n            Xwin: false, // zmienione na true gdy zostanie wykryte zwycięstwo gracza X(1)\r\n            Owin: false,\r\n        }\r\n    }\r\n\r\n    playerMove = (event) => {\r\n        const { player, squares, PlayerMoves, Draw} = this.state;\r\n        let fakeSquaresArr = this.state.squares;\r\n        const targetSquareId = event.target.id;\r\n        const fieldFree = () =>{\r\n        if(player === 1) {\r\n            (() => { // anonimowa samowywołująca sie funkcja \r\n                fakeSquaresArr.map(element => { // wyszukujemy w tablicy squares obiekt z pasującą wartością id targetSquareId i w tym obiekcie do właściwośći content dodajemy X lub O w zależności od kolejki\r\n                    return element.id === targetSquareId && element.content.length === 0 ?\r\n                    element.content = 'X'\r\n                    : \r\n                    null;\r\n                })\r\n                this.setState({player: 2}, () => console.log(fakeSquaresArr)); // zmiana statusu, umożliwia to przełączanie pomiędzy ruchami gracza X i O\r\n            })();\r\n        } else {\r\n            (() => {\r\n                fakeSquaresArr.map(element => {\r\n                    return element.id === targetSquareId && element.content.length === 0 ?\r\n                    element.content = 'O' \r\n                    : \r\n                    null;\r\n                    })\r\n                this.setState({player: 1}, () => console.log(fakeSquaresArr));\r\n            })()\r\n          } \r\n        }\r\n        if(!event.target.hasChildNodes()){ // warunek powstrzymuje przed zmianą kolejki gdy naciśnie się pełne pole\r\n            fieldFree();\r\n            this.setState({wrongField: false})\r\n        } else {\r\n            this.setState({wrongField: true});\r\n        }\r\n\r\n        if((fakeSquaresArr[0].content === 'X' && fakeSquaresArr[1].content === 'X' && fakeSquaresArr[2].content === 'X') || // horizontal 'X' win checking\r\n        (fakeSquaresArr[3].content === 'X' && fakeSquaresArr[4].content === 'X' && fakeSquaresArr[5].content === 'X') ||\r\n        (fakeSquaresArr[6].content === 'X' && fakeSquaresArr[7].content === 'X' && fakeSquaresArr[8].content === 'X')) {\r\n            console.log('X winn');\r\n            this.setState({Xwin: true})\r\n        } else if((fakeSquaresArr[0].content === 'O' && fakeSquaresArr[1].content === 'O' && fakefakeSquaresArrArr[2].content === 'O') || // horizontal 'O' win checking\r\n        (fakeSquaresArr[3].content === 'O' && fakeSquaresArr[4].content === 'O' && fakeSquaresArr[5].content === 'O') ||\r\n        (fakeSquaresArr[6].content === 'O' && fakeSquaresArr[7].content === 'O' && fakeSquaresArr[8].content === 'O')) {\r\n            console.log('O win');\r\n            this.setState({Owin: true})\r\n        } else if((fakeSquaresArr[0].content === 'X' && fakeSquaresArr[3].content === 'X' && fakeSquaresArr[6].content === 'X') || // vertical 'X' win checking\r\n        (fakeSquaresArr[1].content === 'X' && fakeSquaresArr[4].content === 'X' && fakeSquaresArr[7].content === 'X') ||\r\n        (fakeSquaresArr[2].content === 'X' && fakeSquaresArr[5].content === 'X' && fakeSquaresArr[8].content === 'X')) {\r\n            console.log('X win vertical')\r\n            this.setState({Xwin: true})\r\n        } else if((fakeSquaresArr[0].content === 'O' && fakeSquaresArr[3].content === 'O' && fakeSquaresArr[6].content === 'O') || // vertical 'O' win checking\r\n        (fakeSquaresArr[1].content === 'O' && fakeSquaresArr[4].content === 'O' && fakeSquaresArr[7].content === 'O') ||\r\n        (fakeSquaresArr[2].content === 'O' && fakeSquaresArr[5].content === 'O' && fakeSquaresArr[8].content === 'O')) {\r\n            console.log('O win vertical')\r\n            this.setState({Owin: true})\r\n        }else if((fakeSquaresArr[0].content === 'X' && fakeSquaresArr[4].content === 'X' && fakeSquaresArr[8].content === 'X') || // cross 'X' win\r\n        (fakeSquaresArr[2].content === 'X' && fakeSquaresArr[4].content === 'X' && fakeSquaresArr[6].content === 'X')) {\r\n            console.log('X cross win')\r\n            this.setState({Xwin: true})\r\n        } else if((fakeSquaresArr[0].content === 'O' && fakeSquaresArr[4].content === 'O' && fakeSquaresArr[8].content === 'O') || // cross 'O' win\r\n        (fakeSquaresArr[2].content === 'O' && fakeSquaresArr[4].content === 'O' && fakeSquaresArr[6].content === 'O')) {\r\n            console.log('cross O win');\r\n            this.setState({Owin: true})\r\n        }\r\n    }\r\n\r\n    resetGame = () => {\r\n        const winnerHeader = document.querySelector('.winner-container')\r\n        const square = document.querySelectorAll('.square');\r\n        winnerHeader.style.height = '0px';\r\n        this.setState({player: 1})\r\n        this.setState({wrongField:false})\r\n        this.setState({Xwin:false})\r\n        this.setState({Owin:false})\r\n        const array = Array.from(square)\r\n        console.log(array);\r\n        array.forEach(element => {\r\n            if(element.firstChild){\r\n                element.removeChild(element.firstChild);\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {player, wrongField, Xwin, Owin, PlayerMoves} = this.state;\r\n        return(\r\n            <Fragment>\r\n                <div className='game-header-container'><h1 id='game-header'>TIC-TAC-TOE</h1></div>\r\n                <Winner Xwin={Xwin} Owin={Owin} Draw={PlayerMoves}/>\r\n                <Board squaresList={squares} playerMove={this.playerMove} reset={this.resetGame}/>\r\n                <GameConsole turn={player} wrongField={wrongField}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}