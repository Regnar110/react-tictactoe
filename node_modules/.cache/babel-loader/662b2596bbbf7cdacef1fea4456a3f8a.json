{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mateusz\\\\Desktop\\\\Github-projects\\\\react-tictactoe\\\\src\\\\App.js\";\nimport React, { Component, Fragment } from 'react';\nimport Board from './Board.js';\nimport { squares } from './squares-object.js';\nimport GameConsole from './GameConsole.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.playerMove = event => {\n      const {\n        player,\n        squares,\n        playerMoves\n      } = this.state;\n      const targetSquareId = event.target.id;\n\n      const fieldFree = () => {\n        if (player === 1) {\n          (() => {\n            // anonimowa samowywołująca sie funkcja \n            squares.map(element => {\n              // wyszukujemy w tablicy squares obiekt z pasującą wartością id targetSquareId i w tym obiekcie do właściwośći content dodajemy X lub O w zależności od kolejki\n              return element.id === targetSquareId && element.content.length === 0 ? element.content = 'X' : null;\n            });\n            this.setState({\n              player: 2\n            }, () => console.log(squares)); // zmiana statusu, umożliwia to przełączanie pomiędzy ruchami gracza X i O\n          })();\n        } else {\n          (() => {\n            squares.map(element => {\n              return element.id === targetSquareId && element.content.length === 0 ? element.content = 'O' : null;\n            });\n            this.setState({\n              player: 1\n            }, () => console.log(squares));\n          })();\n        }\n      };\n\n      if (!event.target.hasChildNodes()) {\n        // warunek powstrzymuje przed zmianą kolejki gdy naciśnie się pełne pole\n        fieldFree();\n        this.setState({\n          wrongField: false\n        });\n      } else {\n        this.setState({\n          wrongField: true\n        });\n      }\n\n      if ((squares[0].content && squares[1].content && squares[2].content) === 'X' || // horizontal win checking\n      (squares[3].content && squares[4].content && squares[5].content) === 'X' || (squares[6].content && squares[7].content && squares[8].content) === 'X') {\n        console.log('X winn');\n      } else if ((squares[0].content && squares[1].content && squares[2].content) === 'O' || // horizontal win checking\n      (squares[3].content && squares[4].content && squares[5].content) === 'O' || (squares[6].content && squares[7].content && squares[8].content) === 'O') {\n        console.log('O win');\n      }\n    };\n\n    this.state = {\n      player: 1,\n      // 1 to gracz nr 2 to gracz nr  - stan kontrolujący kolejkę\n      squares: squares,\n      // tablica w której każda pozycja odpowiada jednemu kwadratowi na planszy [sq1, sq2, sq3 itd]. Posłuży ona do tego aby wyłonić zwycięzcę gry oraz do implementacji elementów do komponentu square oraz do generowania kwadratów na planszy.\n      wrongField: false,\n      // kiedy zostanie naciśnięte pełne pole zmieni się na true i na podstawie zmiany tego stanu  zostanie wywołana akcja\n      winner: 0,\n      gameStop: false\n    };\n  }\n\n  render() {\n    const {\n      player,\n      wrongField\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"game-header\",\n          children: \"TIC-TAC-TOE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        squaresList: squares,\n        playerMove: this.playerMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GameConsole, {\n        turn: player,\n        wrongField: wrongField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Mateusz/Desktop/Github-projects/react-tictactoe/src/App.js"],"names":["React","Component","Fragment","Board","squares","GameConsole","App","constructor","playerMove","event","player","playerMoves","state","targetSquareId","target","id","fieldFree","map","element","content","length","setState","console","log","hasChildNodes","wrongField","winner","gameStop","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAAQC,OAAR,QAAsB,qBAAtB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AACxBM,EAAAA,WAAW,GAAG;AACV;;AADU,SAWdC,UAXc,GAWAC,KAAD,IAAW;AACpB,YAAM;AAAEC,QAAAA,MAAF;AAAUN,QAAAA,OAAV;AAAmBO,QAAAA;AAAnB,UAAkC,KAAKC,KAA7C;AACA,YAAMC,cAAc,GAAGJ,KAAK,CAACK,MAAN,CAAaC,EAApC;;AACA,YAAMC,SAAS,GAAG,MAAK;AACvB,YAAGN,MAAM,KAAK,CAAd,EAAiB;AACb,WAAC,MAAM;AAAE;AACLN,YAAAA,OAAO,CAACa,GAAR,CAAYC,OAAO,IAAI;AAAE;AACrB,qBAAOA,OAAO,CAACH,EAAR,KAAeF,cAAf,IAAiCK,OAAO,CAACC,OAAR,CAAgBC,MAAhB,KAA2B,CAA5D,GACPF,OAAO,CAACC,OAAR,GAAkB,GADX,GAGP,IAHA;AAIH,aALD;AAMA,iBAAKE,QAAL,CAAc;AAACX,cAAAA,MAAM,EAAE;AAAT,aAAd,EAA2B,MAAMY,OAAO,CAACC,GAAR,CAAYnB,OAAZ,CAAjC,EAPG,CAOqD;AAC3D,WARD;AASH,SAVD,MAUO;AACH,WAAC,MAAM;AACHA,YAAAA,OAAO,CAACa,GAAR,CAAYC,OAAO,IAAI;AACnB,qBAAOA,OAAO,CAACH,EAAR,KAAeF,cAAf,IAAiCK,OAAO,CAACC,OAAR,CAAgBC,MAAhB,KAA2B,CAA5D,GACPF,OAAO,CAACC,OAAR,GAAkB,GADX,GAGP,IAHA;AAIC,aALL;AAMA,iBAAKE,QAAL,CAAc;AAACX,cAAAA,MAAM,EAAE;AAAT,aAAd,EAA2B,MAAMY,OAAO,CAACC,GAAR,CAAYnB,OAAZ,CAAjC;AACH,WARD;AASD;AACF,OAtBD;;AAuBA,UAAG,CAACK,KAAK,CAACK,MAAN,CAAaU,aAAb,EAAJ,EAAiC;AAAE;AAC/BR,QAAAA,SAAS;AACT,aAAKK,QAAL,CAAc;AAACI,UAAAA,UAAU,EAAE;AAAb,SAAd;AACH,OAHD,MAGO;AACH,aAAKJ,QAAL,CAAc;AAACI,UAAAA,UAAU,EAAE;AAAb,SAAd;AACH;;AAED,UAAI,CAACrB,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAX,IAAsBf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAjC,IAA4Cf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAxD,MAAqE,GAAtE,IAA8E;AAChF,OAACf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAX,IAAsBf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAjC,IAA4Cf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAxD,MAAqE,GADnE,IAEF,CAACf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAX,IAAsBf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAjC,IAA4Cf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAxD,MAAqE,GAFtE,EAE4E;AACxEG,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH,OAJD,MAIO,IAAI,CAACnB,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAX,IAAsBf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAjC,IAA4Cf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAxD,MAAqE,GAAtE,IAA8E;AACvF,OAACf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAX,IAAsBf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAjC,IAA4Cf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAxD,MAAqE,GAD5D,IAET,CAACf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAX,IAAsBf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAjC,IAA4Cf,OAAO,CAAC,CAAD,CAAP,CAAWe,OAAxD,MAAqE,GAF/D,EAEqE;AACxEG,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,KArDa;;AAEV,SAAKX,KAAL,GAAa;AACTF,MAAAA,MAAM,EAAE,CADC;AACE;AACXN,MAAAA,OAAO,EAAEA,OAFA;AAES;AAClBqB,MAAAA,UAAU,EAAE,KAHH;AAGU;AACnBC,MAAAA,MAAM,EAAE,CAJC;AAKTC,MAAAA,QAAQ,EAAE;AALD,KAAb;AAOH;;AAgDDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAClB,MAAAA,MAAD;AAASe,MAAAA;AAAT,QAAuB,KAAKb,KAAlC;AACA,wBACI,QAAC,QAAD;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,+BAAuC;AAAI,UAAA,EAAE,EAAC,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,WAAW,EAAER,OAApB;AAA6B,QAAA,UAAU,EAAE,KAAKI;AAA9C;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEE,MAAnB;AAA2B,QAAA,UAAU,EAAEe;AAAvC;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAnEuB;;AAuE5B,eAAenB,GAAf","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport Board from './Board.js';\r\nimport {squares} from './squares-object.js';\r\nimport GameConsole from './GameConsole.js';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            player: 1, // 1 to gracz nr 2 to gracz nr  - stan kontrolujący kolejkę\r\n            squares: squares, // tablica w której każda pozycja odpowiada jednemu kwadratowi na planszy [sq1, sq2, sq3 itd]. Posłuży ona do tego aby wyłonić zwycięzcę gry oraz do implementacji elementów do komponentu square oraz do generowania kwadratów na planszy.\r\n            wrongField: false, // kiedy zostanie naciśnięte pełne pole zmieni się na true i na podstawie zmiany tego stanu  zostanie wywołana akcja\r\n            winner: 0,\r\n            gameStop: false\r\n        }\r\n    }\r\n\r\n    playerMove = (event) => {\r\n        const { player, squares, playerMoves} = this.state;\r\n        const targetSquareId = event.target.id;\r\n        const fieldFree = () =>{\r\n        if(player === 1) {\r\n            (() => { // anonimowa samowywołująca sie funkcja \r\n                squares.map(element => { // wyszukujemy w tablicy squares obiekt z pasującą wartością id targetSquareId i w tym obiekcie do właściwośći content dodajemy X lub O w zależności od kolejki\r\n                    return element.id === targetSquareId && element.content.length === 0 ?\r\n                    element.content = 'X'\r\n                    : \r\n                    null;\r\n                })\r\n                this.setState({player: 2}, () => console.log(squares)); // zmiana statusu, umożliwia to przełączanie pomiędzy ruchami gracza X i O\r\n            })();\r\n        } else {\r\n            (() => {\r\n                squares.map(element => {\r\n                    return element.id === targetSquareId && element.content.length === 0 ?\r\n                    element.content = 'O' \r\n                    : \r\n                    null;\r\n                    })\r\n                this.setState({player: 1}, () => console.log(squares));\r\n            })()\r\n          } \r\n        }\r\n        if(!event.target.hasChildNodes()){ // warunek powstrzymuje przed zmianą kolejki gdy naciśnie się pełne pole\r\n            fieldFree();\r\n            this.setState({wrongField: false})\r\n        } else {\r\n            this.setState({wrongField: true});\r\n        }\r\n\r\n        if(((squares[0].content && squares[1].content && squares[2].content) === 'X') || // horizontal win checking\r\n        ((squares[3].content && squares[4].content && squares[5].content) === 'X') ||\r\n        ((squares[6].content && squares[7].content && squares[8].content) === 'X')) {\r\n            console.log('X winn');\r\n        } else if(((squares[0].content && squares[1].content && squares[2].content) === 'O') || // horizontal win checking\r\n        ((squares[3].content && squares[4].content && squares[5].content) === 'O') ||\r\n        ((squares[6].content && squares[7].content && squares[8].content) === 'O')) {\r\n            console.log('O win');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {player, wrongField} = this.state;\r\n        return(\r\n            <Fragment>\r\n                <div className='game-header-container'><h1 id='game-header'>TIC-TAC-TOE</h1></div>\r\n                <Board squaresList={squares} playerMove={this.playerMove}/>\r\n                <GameConsole turn={player} wrongField={wrongField}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}