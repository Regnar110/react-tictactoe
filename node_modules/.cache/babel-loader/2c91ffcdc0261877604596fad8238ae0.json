{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mateusz\\\\Desktop\\\\Github-projects\\\\react-tictactoe\\\\src\\\\App.js\";\nimport React, { Component, Fragment } from 'react';\nimport Board from './Board.js';\nimport { squares } from './squares-object.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.playerMove = event => {\n      // trzeba zrobić aby nie zmieniało kolejki gdy gracz kliknie już w zajęty kwadrat\n      const {\n        player,\n        squares\n      } = this.state;\n      const targetSquareId = event.target.id;\n      const eventTarget = event.target;\n\n      const fieldFree = () => {\n        if (player === 1) {\n          (() => {\n            // anonimowa samowywołująca sie funkcja \n            squares.map(element => {\n              // wyszukujemy w tablicy squares obiekt z pasującą wartością id targetSquareId i w tym obiekcie do właściwośći content dodajemy X lub O w zależności od kolejki\n              return element.id === targetSquareId && element.content.length === 0 ? element.content = 'X' : null;\n            });\n            this.setState({\n              player: 2\n            }, () => {\n              console.log(squares, player);\n            }); // zmiana statusu, umożliwia to przełączanie pomiędzy ruchami gracza X i O\n          })();\n        } else {\n          (() => {\n            squares.map(element => {\n              return element.id === targetSquareId && element.content.length === 0 ? element.content = 'O' : null;\n            });\n            this.setState({\n              player: 1\n            }, () => {\n              console.log(squares, player);\n            });\n          })();\n        }\n      };\n\n      if (event.target.hasChildNodes()) {\n        console.log('callback');\n        fieldFree();\n      } else {\n        return console.log(event.target);\n      }\n    };\n\n    this.state = {\n      player: 1,\n      // 1 to gracz nr 2 to gracz nr  - stan kontrolujący kolejkę\n      squares: squares // tablica w której każda pozycja odpowiada jednemu kwadratowi na planszy [sq1, sq2, sq3 itd]. Posłuży ona do tego aby wyłonić zwycięzcę gry oraz do implementacji elementów do komponentu square oraz do generowania kwadratów na planszy.\n\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"game-header\",\n          children: \"TIC-TAC-TOE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        squaresList: squares,\n        playerMove: this.playerMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Mateusz/Desktop/Github-projects/react-tictactoe/src/App.js"],"names":["React","Component","Fragment","Board","squares","App","constructor","playerMove","event","player","state","targetSquareId","target","id","eventTarget","fieldFree","map","element","content","length","setState","console","log","hasChildNodes","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAAQC,OAAR,QAAsB,qBAAtB;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AACxBK,EAAAA,WAAW,GAAG;AACV;;AADU,SAQdC,UARc,GAQAC,KAAD,IAAW;AAAE;AACtB,YAAM;AAAEC,QAAAA,MAAF;AAAUL,QAAAA;AAAV,UAAsB,KAAKM,KAAjC;AACA,YAAMC,cAAc,GAAGH,KAAK,CAACI,MAAN,CAAaC,EAApC;AACA,YAAMC,WAAW,GAAGN,KAAK,CAACI,MAA1B;;AACA,YAAMG,SAAS,GAAG,MAAK;AACvB,YAAGN,MAAM,KAAK,CAAd,EAAiB;AACb,WAAC,MAAM;AAAE;AACLL,YAAAA,OAAO,CAACY,GAAR,CAAYC,OAAO,IAAI;AAAE;AACrB,qBAAOA,OAAO,CAACJ,EAAR,KAAeF,cAAf,IAAiCM,OAAO,CAACC,OAAR,CAAgBC,MAAhB,KAA2B,CAA5D,GACPF,OAAO,CAACC,OAAR,GAAkB,GADX,GAGP,IAHA;AAIH,aALD;AAMA,iBAAKE,QAAL,CAAc;AAACX,cAAAA,MAAM,EAAE;AAAT,aAAd,EAA2B,MAAI;AAAEY,cAAAA,OAAO,CAACC,GAAR,CAAYlB,OAAZ,EAAqBK,MAArB;AAA6B,aAA9D,EAPG,CAO8D;AACpE,WARD;AASH,SAVD,MAUO;AACH,WAAC,MAAM;AACHL,YAAAA,OAAO,CAACY,GAAR,CAAYC,OAAO,IAAI;AACnB,qBAAOA,OAAO,CAACJ,EAAR,KAAeF,cAAf,IAAiCM,OAAO,CAACC,OAAR,CAAgBC,MAAhB,KAA2B,CAA5D,GACPF,OAAO,CAACC,OAAR,GAAkB,GADX,GAGP,IAHA;AAIC,aALL;AAMA,iBAAKE,QAAL,CAAc;AAACX,cAAAA,MAAM,EAAE;AAAT,aAAd,EAA2B,MAAI;AAACY,cAAAA,OAAO,CAACC,GAAR,CAAYlB,OAAZ,EAAqBK,MAArB;AAA6B,aAA7D;AACH,WARD;AASH;AACA,OAtBD;;AAuBA,UAAGD,KAAK,CAACI,MAAN,CAAaW,aAAb,EAAH,EAAgC;AAC5BF,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAP,QAAAA,SAAS;AACZ,OAHD,MAGO;AACH,eAAOM,OAAO,CAACC,GAAR,CAAYd,KAAK,CAACI,MAAlB,CAAP;AACH;AACJ,KAzCa;;AAEV,SAAKF,KAAL,GAAa;AACTD,MAAAA,MAAM,EAAE,CADC;AACE;AACXL,MAAAA,OAAO,EAAEA,OAFA,CAEQ;;AAFR,KAAb;AAIH;;AAqCDoB,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,QAAD;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,+BAAuC;AAAI,UAAA,EAAE,EAAC,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,WAAW,EAAEpB,OAApB;AAA6B,QAAA,UAAU,EAAE,KAAKG;AAA9C;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAnDuB;;AAuD5B,eAAeF,GAAf","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport Board from './Board.js';\r\nimport {squares} from './squares-object.js';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            player: 1, // 1 to gracz nr 2 to gracz nr  - stan kontrolujący kolejkę\r\n            squares: squares // tablica w której każda pozycja odpowiada jednemu kwadratowi na planszy [sq1, sq2, sq3 itd]. Posłuży ona do tego aby wyłonić zwycięzcę gry oraz do implementacji elementów do komponentu square oraz do generowania kwadratów na planszy.\r\n        }\r\n    }\r\n\r\n    playerMove = (event) => { // trzeba zrobić aby nie zmieniało kolejki gdy gracz kliknie już w zajęty kwadrat\r\n        const { player, squares } = this.state;\r\n        const targetSquareId = event.target.id;\r\n        const eventTarget = event.target;\r\n        const fieldFree = () =>{\r\n        if(player === 1) {\r\n            (() => { // anonimowa samowywołująca sie funkcja \r\n                squares.map(element => { // wyszukujemy w tablicy squares obiekt z pasującą wartością id targetSquareId i w tym obiekcie do właściwośći content dodajemy X lub O w zależności od kolejki\r\n                    return element.id === targetSquareId && element.content.length === 0 ?\r\n                    element.content = 'X'\r\n                    : \r\n                    null;\r\n                })\r\n                this.setState({player: 2}, ()=>{ console.log(squares, player)}); // zmiana statusu, umożliwia to przełączanie pomiędzy ruchami gracza X i O\r\n            })();\r\n        } else {\r\n            (() => {\r\n                squares.map(element => {\r\n                    return element.id === targetSquareId && element.content.length === 0 ?\r\n                    element.content = 'O' \r\n                    : \r\n                    null;\r\n                    })\r\n                this.setState({player: 1}, ()=>{console.log(squares, player)});\r\n            })()\r\n        }\r\n        }\r\n        if(event.target.hasChildNodes()){\r\n            console.log('callback');\r\n            fieldFree();\r\n        } else {\r\n            return console.log(event.target);\r\n        }\r\n    }   \r\n\r\n    render() {\r\n        return(\r\n            <Fragment>\r\n                <div className='game-header-container'><h1 id='game-header'>TIC-TAC-TOE</h1></div>\r\n                <Board squaresList={squares} playerMove={this.playerMove}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}